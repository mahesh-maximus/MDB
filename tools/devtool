# Development container image (without tag)
DEVCTR_IMAGE_NO_TAG="public.mahesh/mahesh-maximus/mdb"

# Development container tag
DEVCTR_IMAGE_TAG="v1"

# Development container image (name:tag)
# This should be updated whenever we upgrade the development container.
# (Yet another step on our way to reproducible builds.)
DEVCTR_IMAGE="${DEVCTR_IMAGE_NO_TAG}:${DEVCTR_IMAGE_TAG}"

# Naming things is hard
MY_NAME="MDS $(basename "$0")"

# Full path to the Valcan tools dir on the host.
AT_TOOLS_DIR=$(cd "$(dirname "$0")" && pwd)

# Full path to the Valcan sources dir on the host.
AT_ROOT_DIR=$(cd "${AT_TOOLS_DIR}/.." && pwd)

# Full path to devctr dir on the host.
VC_DEVCTR_DIR="${AT_ROOT_DIR}/tools/devctr"

# Full path to the Firecracker sources dir, as bind-mounted in the container.
CTR_AT_ROOT_DIR="/mdb"

# Name of the devctr.
AT_DEVCTR_NAME="mdb"

# Send a decorated message to stdout, followed by a new line
#
say() {
    [ -t 1 ] && [ -n "$TERM" ] \
        && echo "$(tput setaf 2)[$MY_NAME]$(tput sgr0) $*" \
        || echo "[$MY_NAME] $*"
}

# Send a decorated message to stdout, without a trailing new line
#
say_noln() {
    [ -t 1 ] && [ -n "$TERM" ] \
        && echo -n "$(tput setaf 2)[$MY_NAME]$(tput sgr0) $*" \
        || echo "[$MY_NAME] $*"
}

# Send a text message to stderr
#
say_err() {
    [ -t 2 ] && [ -n "$TERM" ] \
        && echo -e "$(tput setaf 1)[$MY_NAME] $*$(tput sgr0)" 1>&2 \
        || echo -e "[$MY_NAME] $*" 1>&2
}

# Send a warning-highlighted text to stdout
say_warn() {
    [ -t 1 ] && [ -n "$TERM" ] \
        && echo "$(tput setaf 3)[$MY_NAME] $*$(tput sgr0)" \
        || echo "[$MY_NAME] $*"
}

# Exit with an error message and (optional) code
# Usage: die [-c <error code>] <error message>
#
die() {
    code=1
    [[ "$1" = "-c" ]] && {
        code="$2"
        shift 2
    }
    say_err "$@"
    exit $code
}

# Exit with an error message if the last exit code is not 0
#
ok_or_die() {
    code=$?
    [[ $code -eq 0 ]] || die -c $code "$@"
}

cmd_prune() {
    say_warn 'Remove all unused containers, networks, images (both dangling and unreferenced), and optionally, volumes.'
    say "Are you sure you want remove all containers?"
    get_user_confirmation || die "Aborted."

    docker system prune -a
}

cmd_help() {
    echo ""
    echo "Vulcan $(basename $0)"
    echo "not yet completed"
    echo ""
}

main() {
    say "Starting devtool ..."
    if [ $# = 0 ]; then
        die "No command provided. Please use \`$0 help\` for help."
    fi

    # Parse main command line args.
    #
    while [ $# -gt 0 ]; do
        case "$1" in
            -h|--help)              { cmd_help; exit 1;     } ;;
            -m|--MM)                { say "--MM"; exit 1;  } ;;
            -*)
                die "Unknown arg: $1. Please use \`$0 help\` for help."
            ;;
            *)
                break
            ;;
        esac
        shift
    done

    # $1 is now a command name. Check if it is a valid command and, if so,
    # run it.
    #
    declare -f "cmd_$1" > /dev/null
    ok_or_die "Unknown command: $1. Please use \`$0 help\` for help."

    cmd=cmd_$1
    shift

    # $@ is now a list of command-specific args
    #
    $cmd "$@"
}

main "$@"
